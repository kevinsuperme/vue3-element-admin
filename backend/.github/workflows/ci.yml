name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Check TypeScript compilation
        working-directory: ./backend
        run: npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run npm audit
        working-directory: ./backend
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        working-directory: ./backend
        continue-on-error: true

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: [code-quality]

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          SESSION_SECRET: test-session-secret-key-for-ci-testing
        run: npm run test:unit

      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:unit:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [code-quality]

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Run integration tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          SESSION_SECRET: test-session-secret-key-for-ci-testing
          PORT: 3001
        run: npm run test:integration

  # Build and Deploy to Staging
  build-and-deploy-staging:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --production

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t vue3-admin-backend:staging-${{ github.sha }} .
          docker tag vue3-admin-backend:staging-${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/vue3-admin-backend:staging

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_REGISTRY }}/vue3-admin-backend:staging

      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/vue3-admin
            docker-compose pull
            docker-compose up -d --no-deps backend
            docker system prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/api/system/health || exit 1

  # Build and Deploy to Production
  build-and-deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --production

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: backend-v${{ github.run_number }}
          release_name: Backend Release v${{ github.run_number }}
          body: |
            ## Changes in this release
            - Automated deployment from main branch
            - Commit: ${{ github.sha }}
            - Build: ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t vue3-admin-backend:${{ github.run_number }} .
          docker tag vue3-admin-backend:${{ github.run_number }} ${{ secrets.DOCKER_REGISTRY }}/vue3-admin-backend:latest
          docker tag vue3-admin-backend:${{ github.run_number }} ${{ secrets.DOCKER_REGISTRY }}/vue3-admin-backend:${{ github.run_number }}

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_REGISTRY }}/vue3-admin-backend:latest
          docker push ${{ secrets.DOCKER_REGISTRY }}/vue3-admin-backend:${{ github.run_number }}

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/vue3-admin
            docker-compose pull
            docker-compose up -d --no-deps backend
            docker system prune -f

      - name: Health check
        run: |
          sleep 60
          curl -f ${{ secrets.PRODUCTION_URL }}/api/system/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Performance and Load Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-staging]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run performance tests
        run: |
          artillery run tests/performance/load-test.yml --target ${{ secrets.STAGING_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: artillery-report.html
        if: always()